name: "Security Pipeline (Python: SAST + SCA + Image + DAST)"

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pages: write
  id-token: write

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pull_code:
    name: Pulling du code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

  sast:
    name: Analyse statique (CodeQL)
    runs-on: ubuntu-latest
    needs: pull_code
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
      - name: Export CodeQL SARIF
        run: |
          mkdir -p reports
          echo '{"note":"CodeQL executed; see Security tab for full SARIF"}' > reports/codeql-summary.json
      - name: Upload CodeQL report
        uses: actions/upload-artifact@v4
        with:
          name: codeql-report
          path: reports/

  sca:
    name: Analyse des dépendances (Trivy)
    runs-on: ubuntu-latest
    needs: pull_code
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Trivy CLI
        uses: aquasecurity/setup-trivy@v0.2.3
      - name: Trivy scan deps
        run: trivy fs --scanners vuln --vuln-type library --severity HIGH,CRITICAL .
      - name: Trivy scan deps (JSON)
        run: |
          trivy fs --scanners vuln --vuln-type library \
            --severity HIGH,CRITICAL \
            --format json --output trivy-sca.json .
      - name: Upload SCA report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sca
          path: trivy-sca.json

  build:
    name: Build de l’image
    runs-on: ubuntu-latest
    needs: [sast, sca]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec
          IMAGE_TAG=${{ github.sha }}
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG

  image_scan:
    name: Analyse des images (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install Trivy CLI
        uses: aquasecurity/setup-trivy@v0.2.3
      - name: Trivy image scan
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec
          IMAGE_TAG=${{ github.sha }}
          trivy image --severity HIGH,CRITICAL $IMAGE_NAME:$IMAGE_TAG
      - name: Trivy image scan (JSON)
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec
          IMAGE_TAG=${{ github.sha }}
          trivy image --severity HIGH,CRITICAL \
            --format json --output trivy-image.json $IMAGE_NAME:$IMAGE_TAG
      - name: Upload image scan report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image
          path: trivy-image.json

  dast:
    name: Analyse dynamique (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: image_scan
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull app image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec
          IMAGE_TAG=${{ github.sha }}
          docker pull $IMAGE_NAME:$IMAGE_TAG

      - name: Create Docker network
        run: docker network create zapnet || true

      - name: Run app container
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec
          IMAGE_TAG=${{ github.sha }}
          docker run -d --rm --network zapnet --name app $IMAGE_NAME:$IMAGE_TAG

      - name: Wait for app
        run: |
          for i in {1..30}; do
            if docker run --rm --network zapnet curlimages/curl:8.8.0 -fsS http://app:8080/ >/dev/null 2>&1; then
              echo "App is up"; exit 0
            fi
            echo "Waiting app... ($i/30)"; sleep 2
          done
          echo "App did not become ready in time"; docker logs app || true; exit 1

      - name: OWASP ZAP Baseline (HTML+JSON+XML)
        run: |
          docker run --rm --network zapnet \
            -v "$(pwd)":/zap/wrk \
            --user root \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t "http://app:8080" -m 5 \
            -r zap-report.html -J zap-report.json -x zap-report.xml -I

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap-report.html
            zap-report.json
            zap-report.xml

      - name: Stop app
        if: always()
        run: docker stop app || true

  collect_reports:
    name: Collecte des rapports
    runs-on: ubuntu-latest
    needs: [sast, sca, image_scan, dast]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports
      - name: Organize reports
        run: |
          mkdir -p site/reports
          cp -r security-reports/* site/reports/ || true

  build_dashboard:
    name: Générer le dashboard sécurité
    runs-on: ubuntu-latest
    needs: collect_reports
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install MkDocs + plugins
        run: |
          pip install mkdocs mkdocs-material pymdown-extensions mike
      - name: Prepare docs
        run: |
          mkdir -p docs/reports
          cp -r site/reports/* docs/reports/ || true
          # Création d'index.md
          echo "# Security Dashboard" > docs/index.md
          echo "## Rapports disponibles" >> docs/index.md
          ls docs/reports >> docs/index.md || echo "Aucun rapport trouvé" >> docs/index.md
      - name: Create mkdocs.yml
        run: |
          echo "site_name: Security Dashboard" > mkdocs.yml
          echo "nav:" >> mkdocs.yml
          echo "  - Home: index.md" >> mkdocs.yml
          echo "  - SAST:" >> mkdocs.yml
          echo "    - CodeQL: docs/reports/codeql-summary.json" >> mkdocs.yml
          echo "  - SCA:" >> mkdocs.yml
          echo "    - Trivy SCA: docs/reports/trivy-sca.json" >> mkdocs.yml
          echo "  - Image Scan:" >> mkdocs.yml
          echo "    - Trivy Image: docs/reports/trivy-image.json" >> mkdocs.yml
          echo "  - DAST:" >> mkdocs.yml
          echo "    - ZAP: docs/reports/zap-report.html" >> mkdocs.yml
          echo "theme:" >> mkdocs.yml
          echo "  name: material" >> mkdocs.yml
      - name: Build MkDocs site
        run: |
          mkdocs build --site-dir ./site
          echo "Listing site content:"
          ls -la site

  deploy_pages:
    name: Déployer sur GitHub Pages
    runs-on: ubuntu-latest
    needs: build_dashboard
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Check site folder
        run: ls -la site || echo "site folder does not exist!"
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
