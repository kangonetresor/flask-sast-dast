name: "Security Pipeline (Python: SAST + SCA + Image + DAST)"

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  start_reportportal_launch:
    name: Start ReportPortal Launch
    runs-on: ubuntu-latest
    outputs:
      launch_id: ${{ steps.start_launch.outputs.launch_id }}
    steps:
      - name: Install Python & dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          pip3 install reportportal-client
      - name: Start launch
        id: start_launch
        run: |
          python3 - <<'EOF'
import os, json
from reportportal_client import ReportPortalServiceAsync

RP_ENDPOINT = os.environ['RP_ENDPOINT']
RP_PROJECT = os.environ['RP_PROJECT']
RP_TOKEN = os.environ['RP_TOKEN']

service = ReportPortalServiceAsync(endpoint=RP_ENDPOINT, project=RP_PROJECT, token=RP_TOKEN)
launch = service.start_launch(name="Security Pipeline Full Launch")
print(f"::set-output name=launch_id::{launch['id']}")
EOF

  pull_code:
    name: Pulling du code
    runs-on: ubuntu-latest
    needs: start_reportportal_launch
    steps:
      - name: Checkout
        uses: actions/checkout@v4

  sast:
    name: Analyse statique (CodeQL)
    runs-on: ubuntu-latest
    needs: [pull_code, start_reportportal_launch]
    env:
      LAUNCH_ID: ${{ needs.start_reportportal_launch.outputs.launch_id }}
      RP_ENDPOINT: ${{ secrets.RP_ENDPOINT }}
      RP_PROJECT: ${{ secrets.RP_PROJECT }}
      RP_TOKEN: ${{ secrets.RP_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Analyze
        uses: github/codeql-action/analyze@v3
      - name: Export & send CodeQL to ReportPortal
        run: |
          pip install reportportal-client jq
          mkdir -p reports
          echo '{"note":"CodeQL executed; see Security tab for full SARIF"}' > reports/codeql-summary.json
          python3 - <<'EOF'
import json, os
from reportportal_client import ReportPortalServiceAsync

launch_id = os.environ['LAUNCH_ID']
service = ReportPortalServiceAsync(endpoint=os.environ['RP_ENDPOINT'], project=os.environ['RP_PROJECT'], token=os.environ['RP_TOKEN'])
with open("reports/codeql-summary.json") as f:
    data = json.load(f)
test_item = service.start_test_item(name="CodeQL Scan", item_type="TEST", launch_id=launch_id)
service.log(test_item['id'], level='ERROR', message=json.dumps(data))
service.finish_test_item(test_item['id'])
EOF

  sca:
    name: Analyse des dÃ©pendances (Trivy)
    runs-on: ubuntu-latest
    needs: [pull_code, start_reportportal_launch]
    env:
      LAUNCH_ID: ${{ needs.start_reportportal_launch.outputs.launch_id }}
      RP_ENDPOINT: ${{ secrets.RP_ENDPOINT }}
      RP_PROJECT: ${{ secrets.RP_PROJECT }}
      RP_TOKEN: ${{ secrets.RP_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Trivy CLI
        uses: aquasecurity/setup-trivy@v0.2.3
      - name: Trivy scan deps (JSON)
        run: |
          trivy fs --scanners vuln --vuln-type library --severity HIGH,CRITICAL --format json --output trivy-sca.json .
      - name: Upload Trivy SCA to ReportPortal
        run: |
          pip install reportportal-client
          python3 - <<'EOF'
import json, os
from reportportal_client import ReportPortalServiceAsync

launch_id = os.environ['LAUNCH_ID']
service = ReportPortalServiceAsync(endpoint=os.environ['RP_ENDPOINT'], project=os.environ['RP_PROJECT'], token=os.environ['RP_TOKEN'])

with open("trivy-sca.json") as f:
    data = json.load(f)

test_item = service.start_test_item(name="Trivy SCA Scan", item_type="TEST", launch_id=launch_id)
for result in data.get("Results", []):
    for vuln in result.get("Vulnerabilities", []):
        service.log(test_item['id'], level='ERROR', message=f"{vuln.get('VulnerabilityID')}: {vuln.get('Description')}")
service.finish_test_item(test_item['id'])
EOF

  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [sast, sca]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec
          IMAGE_TAG=${{ github.sha }}
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG

  image_scan:
    name: Analyse image (Trivy)
    runs-on: ubuntu-latest
    needs: [build, start_reportportal_launch]
    env:
      LAUNCH_ID: ${{ needs.start_reportportal_launch.outputs.launch_id }}
      RP_ENDPOINT: ${{ secrets.RP_ENDPOINT }}
      RP_PROJECT: ${{ secrets.RP_PROJECT }}
      RP_TOKEN: ${{ secrets.RP_TOKEN }}
    steps:
      - name: Install Trivy CLI
        uses: aquasecurity/setup-trivy@v0.2.3
      - name: Scan Docker image (JSON)
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec
          IMAGE_TAG=${{ github.sha }}
          trivy image --severity HIGH,CRITICAL --format json --output trivy-image.json $IMAGE_NAME:$IMAGE_TAG
      - name: Upload Trivy Image to ReportPortal
        run: |
          pip install reportportal-client
          python3 - <<'EOF'
import json, os
from reportportal_client import ReportPortalServiceAsync

launch_id = os.environ['LAUNCH_ID']
service = ReportPortalServiceAsync(endpoint=os.environ['RP_ENDPOINT'], project=os.environ['RP_PROJECT'], token=os.environ['RP_TOKEN'])

with open("trivy-image.json") as f:
    data = json.load(f)

test_item = service.start_test_item(name="Trivy Image Scan", item_type="TEST", launch_id=launch_id)
for result in data.get("Results", []):
    for vuln in result.get("Vulnerabilities", []):
        service.log(test_item['id'], level='ERROR', message=f"{vuln.get('VulnerabilityID')}: {vuln.get('Description')}")
service.finish_test_item(test_item['id'])
EOF

  dast:
    name: Analyse dynamique (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: [image_scan, start_reportportal_launch]
    env:
      LAUNCH_ID: ${{ needs.start_reportportal_launch.outputs.launch_id }}
      RP_ENDPOINT: ${{ secrets.RP_ENDPOINT }}
      RP_PROJECT: ${{ secrets.RP_PROJECT }}
      RP_TOKEN: ${{ secrets.RP_TOKEN }}
    steps:
      - name: Pull app image & run container
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec
          IMAGE_TAG=${{ github.sha }}
          docker network create zapnet || true
          docker run -d --rm --network zapnet --name app $IMAGE_NAME:$IMAGE_TAG
      - name: Wait for app ready
        run: |
          for i in {1..30}; do
            if docker run --rm --network zapnet curlimages/curl:8.8.0 -fsS http://app:8080/ >/dev/null 2>&1; then exit 0; fi
            sleep 2
          done
          echo "App did not become ready"; docker logs app || true; exit 1
      - name: Run ZAP scan (HTML+JSON+XML)
        run: |
          docker run --rm --network zapnet -v "$(pwd)":/zap/wrk --user root ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t "http://app:8080" -m 5 -r zap-report.html -J zap-report.json -x zap-report.xml -I
      - name: Upload ZAP to ReportPortal
        run: |
          pip install reportportal-client
          python3 - <<'EOF'
import xml.etree.ElementTree as ET
import os
from reportportal_client import ReportPortalServiceAsync

launch_id = os.environ['LAUNCH_ID']
service = ReportPortalServiceAsync(endpoint=os.environ['RP_ENDPOINT'], project=os.environ['RP_PROJECT'], token=os.environ['RP_TOKEN'])

tree = ET.parse("zap-report.xml")
root = tree.getroot()
test_item = service.start_test_item(name="ZAP Scan", item_type="TEST", launch_id=launch_id)
for i, alert in enumerate(root.findall(".//alertitem")):
    name = alert.findtext("alert") or f"zap-{i}"
    desc = alert.findtext("desc") or ""
    service.log(test_item['id'], level='ERROR', message=f"{name}: {desc}")
service.finish_test_item(test_item['id'])
EOF
      - name: Stop app
        if: always()
        run: docker stop app

  finish_reportportal_launch:
    name: Finish ReportPortal Launch
    runs-on: ubuntu-latest
    needs: [sast, sca, image_scan, dast]
    env:
      LAUNCH_ID: ${{ needs.start_reportportal_launch.outputs.launch_id }}
      RP_ENDPOINT: ${{ secrets.RP_ENDPOINT }}
      RP_PROJECT: ${{ secrets.RP_PROJECT }}
      RP_TOKEN: ${{ secrets.RP_TOKEN }}
    steps:
      - name: Install Python
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          pip3 install reportportal-client
      - name: Finish launch
        run: |
          python3 - <<'EOF'
import os
from reportportal_client import ReportPortalServiceAsync

launch_id = os.environ['LAUNCH_ID']
service = ReportPortalServiceAsync(endpoint=os.environ['RP_ENDPOINT'], project=os.environ['RP_PROJECT'], token=os.environ['RP_TOKEN'])
service.finish_launch(launch_id)
EOF
