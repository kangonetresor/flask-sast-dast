name: "Security Pipeline (Python: SAST + SCA + Image + DAST)"

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pull_code:
    name: Pulling du code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

  sast:
    name: Analyse statique (CodeQL)
    runs-on: ubuntu-latest
    needs: pull_code
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  sca:
    name: Analyse des dépendances (Trivy)
    runs-on: ubuntu-latest
    needs: pull_code
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Trivy CLI
        uses: aquasecurity/setup-trivy@v0.2.3
      - name: Trivy scan deps
        run: trivy fs --scanners vuln --vuln-type library --severity HIGH,CRITICAL .

  build:
    name: Build de l’image
    runs-on: ubuntu-latest
    needs: [sast, sca]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec
          IMAGE_TAG=${{ github.sha }}
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG

  image_scan:
    name: Analyse des images (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install Trivy CLI
        uses: aquasecurity/setup-trivy@v0.2.3
      - name: Trivy image scan
        run: trivy image --severity HIGH,CRITICAL ${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec:${{ github.sha }}

  image_scan:
    name: Analyse des images (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Trivy CLI
        uses: aquasecurity/setup-trivy@v0.2.3

      - name: Trivy image scan
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/img_app_arolitec
          IMAGE_TAG=${{ github.sha }}
          trivy image --severity HIGH,CRITICAL $IMAGE_NAME:$IMAGE_TAG



  dast:
    name: Analyse dynamique (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: image_scan
    steps:
      - name: Run app container
        run: docker run -d --rm --name app -p 127.0.0.1:8080:8080 local/img_app_arolitec:${{ github.sha }}
      - name: OWASP ZAP Baseline
        run: |
          docker run --rm --network host \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t "http://127.0.0.1:8080" -m 5 -r zap-report.html
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html
      - name: Stop app
        if: always()
        run: docker stop app
